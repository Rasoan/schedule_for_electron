{
    // Настраивает параметры компиляции. Параметры называются также, как и в командной строке.
    "compilerOptions": {
    "resolveJsonModule": true,
        // Основные настройки.
        // Настройки путей для создания выходных файлов.

        // Определяет тип импорта кода в итоговом файле, прописанном в "outFile". Необходимо задавать при использовании опции "outFile".
        "module": "commonjs",
        // Поместить все скомпилированные файлы в данную папку, согласно их вложенности в исходниках. Если задана опция "outFile", то опция "outDir" будет проигнорирована.
        // Если указан параметр "types", то из всех найденных будут использованы только те описания типов, что указаны в его массиве, а именно: "./typings/node", "./typings/lodash", "./typings/express".
        "types": [
        "node"
        //      "babel__core",
        //      "jest"
    ],
        "baseUrl": "./",
        /*
            // Путь до папки с которой надо начинать поиск входных файлов. Обычно корневая директория вычисляется по списку входных файлов. Данная опция необходима для проверки, что все найденные TypeScript-файлы находятся внутри корневой папки.
            "rootDir": "../src",
            // Список корневых папок, совокупный контент которых представляет структуру проекта для компиляции.
            "rootDirs": [
              "src/views",
              "generated/templates/views"
            ],
            */
        // Путь до базовой папки для поиска не относительных путей до файлов.
        // Набор библиотечных файлов полифилов, которые будут включены в итоговый выходной файл.
        "lib": ["esnext", "ES2020", "ES2019", "DOM", ],
        //    "lib": ["ES2020", "ES2019", "DOM", "webworker"],
        // Включать ли поддержку ".tsx" файлов?
        //    "jsx": "react",
        //    // Укажите фабричную функцию JSX, чтобы использовать, когда таргетинг реагирует на обработку JSX, например: 'React.createElement' или 'h'. Требуется TypeScript версии 2.1 или новее.
        //    "jsxFactory": "React.createElement",
        // Разрешать компилировать файлы с JavaScript-кодом?
        "allowJs": true,
        // Компилировать ли каждый файл в строгом режиме и создавать ли 'use strict' для каждого выходного файла? Требуется TypeScript версии 2.1 или новее.
        "alwaysStrict": true,
        //    // Сообщить об ошибках в .js-файлах? Используйте совместно с "allowJs".
        //    "checkJs": false,
        //    // Обеспечьте полную поддержку итераций для for - in, ..., деструктуризации при настройке на ES5 или ES3?
        //    "downlevelIteration": false,
        //    // Имортировать созданные хелперы (__extends, __rest и так далее) из "tslib".
        //    "importHelpers": false,
        //    // Не помещать в код итогового файла функции хелперы.
        //    "noEmitHelpers": false,
        // Создавать ли соответствующие source map файлы ".map"?
        "sourceMap": false,
        //    // Включить ли все строги проверки типов сразу: noImplicitAny, noImplicitThis, alwaysStrict, strictNullChecks, strictFunctionTypes, strictPropertyInitialization?
        //    "strict": false,
        // Значения "null" и "undefined" могут быть присвоены только значениям данного типа и значениям только с типом "any"?
        "strictNullChecks": true,
        // Не создавать объявления для кода, который имеет аннотацию JSDoc /** @internal */.
        "stripInternal": true,
        // Тип кода создаваемого итогового файла.
        "target": "es6",

        // Дополнительные настройки.
        // Показывать ли диагностическую информацию?,
        "diagnostics": false,
        // ?
        "extendedDiagnostics": false,
        //    // Кодировка входных файлов.
        //    "charset": "utf8",
        // Создавать ли соответствующие файлы ".d.ts"?
        "declaration": false,
        // Создать хелперы __importStar и __importDefault для обеспечения совместимости с экосистемой Babel и включить allowSyntheticDefaultImports для совместимости с системой типов.
        "esModuleInterop": true,
        // Определить способ поиска модулей в папках: как в Node.js или классический, как в TypeScript 1.5 и ниже.
        "moduleResolution": "node",
        // Отключить ограничение размера в проекте JavaScript.
        "disableSizeLimit": false,
        // Показывать ошибку, если где-то задан тип "any".
        "noImplicitAny": false,
        // Показывать ошибку на "this", если где-то задан тип "any".
        "noImplicitThis": true,
        //
        "strictBindCallApply": true,
        // Создавать метаданные для объявлений декораторов в исходном коде?
        "emitDecoratorMetadata": false,
        // Включить экспериментальную поддержку декораторов EcmaScript?
        "experimentalDecorators": true,
        // Не удалять объявления const enum из итогового файла.
        "preserveConstEnums": true,
        // Отключить проверку бивариантных параметров для типов функций.
        "strictFunctionTypes": true,
        // Убедитесь, что свойства класса, имеющие значения undefined, получают новые значения внутри конструктора.
        "strictPropertyInitialization": true,
        // Определяет тип завершения строк в итоговом файле.
        "newLine": "lf",
        "jsx": "react"
},
    //  "files": [
    //    // Список относительных или абсолютных путей до конкретных исходных файлов, которые обязательно надо скомпилировать.
    //    // Если секция "files" не указана, то компилятор по умолчанию включает все файлы с расширением *.ts и *.tsx, которые находятся в корневой папке и внутренних подпапках проекта.
    //    // Если секция "files" указана, то скомпилируются файлы, которые в ней перечислены.
    //    // Все файлы, на которые есть ссылки в файлах из секции "files", также скомпилируются.
    //    "core.ts",
    //    "app.ts"
    //  ],
    // Вместе с компиляцией только конкретных исходных файлов можно компилировать только файлы в заданных папках, которые будут найдены через регулярные выражения, которые принимают только следующие значения:
    // - букву или цифру;
    // - * - ноль или более любых символов, не включая разделители директорий "/" и "\";
    // - ? - один любой символ, не включая разделители директорий "/" и "\";
    // - **/ - рекурсивно включить любую подпапку.
    // Если путь до папки заканчивается так "*" или так ".*", тогда в ней будут скомплированы все файлы с расширениями .ts, .tsx, .d.ts, а также .js и .jsx, если опция "allowJs" будет равна true.
    "include": [
    // Секция "include" позволяет скомпилировать все файлы, находящиеся в заданных папках.
    // Если секция "files" и секция "include" заданы вместе, то будут скомпилированы только файлы, перечисленные в обеих секциях.
    // Все файлы, на которые есть ссылки во включенных файлах из секции "files" и секции "include", также скомпилируются.
    "**/*.ts",
    "**/*.tsx",
    "src/index.html",
    "ts_types/**/*.ts"
    // ПРОБЛЕМА параметра "include":
    //  Если сюда вставить путь до файлов из другой директории c паттерном "**/*", например:
    //  "../cftools/ts_types/**/*.d.ts"
    //  то скомпилированные названия путей файлов будут содержать названия корневых папок, например:
    //  "build-ts\cfasterisk2\AmiCallsPacker\AmiCallPacker.js"
    //  вместо
    //  "build-ts\AmiCallsPacker\AmiCallPacker.js"
    // Возможно, это баг typescript'а.
],
    "exclude": [
    // Секция "exclude" позволяет исключить при компиляции определенные файлы, которые находятся в заданных папках секции "include" или в папках всего проекта, если секция "include" не задана.
    // Компилятор не будет учитывать перечисленные в секции "exclude" файлы TypeScript, которые находятся в папках из секции "include".
    // Однако файлы, заданные в секции "files" будут обязательно скомпилированы.
    // Если секция "exclude" не указана, то по умолчанию будут исключаться из компиляции все файлы из папок:
    // - node_modules,
    // - bower_components,
    // - jspm_packages,
    // - файлы из папки, указанной в опции компилятора "outDir".
    "node_modules",
    "build",
    "build_cache",
    "build_ts",
    // tsc работает странно, и без это строчки лезет в "node_modules/junct.io", несмотря на то, что "node_modules" находиться в списке "exclude"
    "node_modules/junct.io",
    "node_scripts",
    "doc",
    "tasks",
    "test",
    // Закомментировал из-за какой-то странной проблемы:
    //  TypeScript почему-то лезет в _build_lib/ts-plugins/ts-transformer-minify-privates/node_modules/
    //  за типами для сборки *_spec.ts файлов
    "spec",
    "spec_utils",
    "spec_data",
    "_benchmarks",
    "_build_lib",
    "_dev_utils",
    "_snippets"
]
}
